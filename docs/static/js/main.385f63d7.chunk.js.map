{"version":3,"sources":["helpers/math.js","components/ButtonContainer.js","App.js","serviceWorker.js","index.js"],"names":["doMath","input","math","x","y","resultArr","length","splice","indexOf","Math","round","pow","BUTTONS","id","value","type","ButtonContainer","updateDisplay","useState","rawNum","setRawNum","lastInputType","setLastInputType","array","setArray","className","map","button","key","name","onClick","e","lastRaw","lastArr","lastInput","isEmptyArr","Boolean","isEmpty","poppedArray","slice","test","replace","posneg","String","Number","result","handleClick","target","App","displayText","setDisplayText","arr","item","join","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.385f63d7.chunk.js","sourcesContent":["/**\n * Do math from an array input\n *\n * @param {Array} input\n * @returns {number}\n */\nconst doMath = input => {\n  const math = {\n    \"+\": (x, y) => x + y,\n    \"-\": (x, y) => x - y,\n    \"*\": (x, y) => x * y,\n    \"/\": (x, y) => x / y\n  };\n\n  let resultArr = [...input];\n\n  if (typeof resultArr[resultArr.length - 1] !== \"number\") {\n    resultArr.splice(-1, 1);\n  }\n  //console.log(\"Input value: \", resultArr);\n\n  while (resultArr.indexOf(\"/\") !== -1) {\n    resultArr.splice(\n      resultArr.indexOf(\"/\") - 1,\n      3,\n      math[\"/\"](\n        resultArr[resultArr.indexOf(\"/\") - 1],\n        resultArr[resultArr.indexOf(\"/\") + 1]\n      )\n    );\n  }\n  //console.log(\"Divide: \", resultArr);\n\n  while (resultArr.indexOf(\"*\") !== -1) {\n    resultArr.splice(\n      resultArr.indexOf(\"*\") - 1,\n      3,\n      math[\"*\"](\n        resultArr[resultArr.indexOf(\"*\") - 1],\n        resultArr[resultArr.indexOf(\"*\") + 1]\n      )\n    );\n  }\n  //console.log(\"Multiply: \", resultArr);\n\n  while (resultArr.indexOf(\"-\") !== -1) {\n    resultArr.splice(\n      resultArr.indexOf(\"-\") - 1,\n      3,\n      math[\"-\"](\n        resultArr[resultArr.indexOf(\"-\") - 1],\n        resultArr[resultArr.indexOf(\"-\") + 1]\n      )\n    );\n  }\n  //console.log(\"Subtract: \", resultArr);\n\n  while (resultArr.indexOf(\"+\") !== -1) {\n    resultArr.splice(\n      resultArr.indexOf(\"+\") - 1,\n      3,\n      math[\"+\"](\n        resultArr[resultArr.indexOf(\"+\") - 1],\n        resultArr[resultArr.indexOf(\"+\") + 1]\n      )\n    );\n  }\n  //console.log(\"Add => Result: \", resultArr);\n\n  resultArr[0] = Math.round(resultArr[0] * Math.pow(10, 5)) / Math.pow(10, 5);\n  return resultArr[0];\n};\n\nexport default doMath;\n","import React, { useState } from \"react\";\n\nimport doMath from \"../helpers/math\";\n\nconst BUTTONS = [\n  { id: \"zero\", value: \"0\", type: \"number\" },\n  { id: \"one\", value: \"1\", type: \"number\" },\n  { id: \"two\", value: \"2\", type: \"number\" },\n  { id: \"three\", value: \"3\", type: \"number\" },\n  { id: \"four\", value: \"4\", type: \"number\" },\n  { id: \"five\", value: \"5\", type: \"number\" },\n  { id: \"six\", value: \"6\", type: \"number\" },\n  { id: \"seven\", value: \"7\", type: \"number\" },\n  { id: \"eight\", value: \"8\", type: \"number\" },\n  { id: \"nine\", value: \"9\", type: \"number\" },\n  { id: \"decimal\", value: \".\", type: \"number\" },\n  { id: \"pos-neg\", value: \"+/-\", type: \"number\" },\n  { id: \"add\", value: \"+\", type: \"operator\" },\n  { id: \"subtract\", value: \"-\", type: \"operator\" },\n  { id: \"divide\", value: \"/\", type: \"operator\" },\n  { id: \"multiply\", value: \"*\", type: \"operator\" },\n  { id: \"clear\", value: \"AC\", type: \"memory\" },\n  { id: \"cancel-entry\", value: \"CE\", type: \"memory\" },\n  { id: \"equal\", value: \"=\", type: \"equal\" }\n];\n\nexport default function ButtonContainer({ updateDisplay }) {\n  const [rawNum, setRawNum] = useState(\"0\");\n  const [lastInputType, setLastInputType] = useState(\"number\");\n  const [array, setArray] = useState([]);\n\n  const handleClick = (type, value) => {\n    const lastRaw = rawNum;\n    const lastArr = [...array];\n    const lastInput = lastInputType;\n    const isEmptyArr = Boolean(lastArr.length === 0);\n    const isEmpty = Boolean(lastRaw === \"0\");\n    const poppedArray = [...array].slice(0, -1);\n\n    switch (type) {\n      case \"number\":\n        switch (value) {\n          case \".\":\n            if (!/\\./.test(lastRaw)) {\n              updateDisplay(\n                lastArr,\n                (lastRaw + value).replace(/^0+(?=\\d)/, \"\")\n              );\n\n              setRawNum(lastRaw + value);\n              setLastInputType(type);\n            }\n            break;\n          case \"+/-\":\n            if (!isEmpty) {\n              const posneg = String(Number(lastRaw) * -1);\n              updateDisplay(lastArr, posneg);\n\n              setRawNum(posneg);\n              setLastInputType(type);\n            }\n            break;\n          default:\n            updateDisplay(lastArr, (lastRaw + value).replace(/^0+(?=\\d)/, \"\"));\n\n            setRawNum(lastRaw + value);\n            setLastInputType(type);\n        }\n        break;\n      case \"operator\":\n        switch (lastInput) {\n          case \"operator\":\n            updateDisplay(poppedArray, value);\n\n            setArray([...poppedArray, value]);\n            break;\n          case \"memory\":\n            if (isEmpty) {\n              if (typeof lastArr[lastArr.length - 1] === \"number\") {\n                updateDisplay([...lastArr], value);\n\n                setLastInputType(type);\n                setArray([...lastArr, value]);\n              } else {\n                updateDisplay(poppedArray, value);\n\n                setLastInputType(type);\n                setArray([...poppedArray, value]);\n              }\n              if (isEmptyArr) {\n                updateDisplay([Number(\"0\")], value);\n\n                setLastInputType(type);\n                setArray([Number(\"0\"), value]);\n              }\n            } else {\n              updateDisplay([...lastArr, Number(lastRaw)], value);\n\n              setRawNum(\"0\");\n              setLastInputType(type);\n              setArray([...lastArr, Number(lastRaw), value]);\n            }\n            break;\n          default:\n            updateDisplay([...lastArr, Number(lastRaw)], value);\n\n            setRawNum(\"0\");\n            setLastInputType(type);\n            setArray([...lastArr, Number(lastRaw), value]);\n        }\n        break;\n      case \"memory\":\n        switch (value) {\n          case \"AC\":\n            updateDisplay([], \"0\");\n\n            setRawNum(\"0\");\n            setLastInputType(type);\n            setArray([]);\n            break;\n          case \"CE\":\n            if (!isEmpty) {\n              updateDisplay(lastArr, isEmptyArr ? \"0\" : \"\");\n\n              setRawNum(\"0\");\n              setLastInputType(type);\n            } else {\n              if (!isEmptyArr) {\n                if (typeof lastArr[lastArr.length - 1] === \"number\") {\n                  updateDisplay(\n                    poppedArray,\n                    poppedArray.length === 0 ? \"0\" : \"\"\n                  );\n\n                  setRawNum(\"0\");\n                  setLastInputType(type);\n                  setArray(poppedArray);\n                } else {\n                  updateDisplay(\n                    [...lastArr].slice(0, -2),\n                    lastArr[lastArr.length - 2]\n                  );\n\n                  setRawNum(String(lastArr[lastArr.length - 2]));\n                  setLastInputType(type);\n                  setArray([...lastArr].slice(0, -2));\n                }\n              }\n            }\n            break;\n          default:\n        }\n        break;\n      case \"equal\":\n        if (lastInput !== \"equal\") {\n          const result = doMath(\n            isEmpty && !isEmptyArr\n              ? [...lastArr]\n              : [...lastArr, Number(lastRaw)]\n          );\n          updateDisplay([], String(result));\n\n          setRawNum(String(result));\n          setLastInputType(type);\n          setArray([]);\n        }\n        break;\n      default:\n    }\n  };\n\n  return (\n    <div id=\"button-container\" className=\"button-container\">\n      {BUTTONS.map(button => (\n        <button\n          id={button.id}\n          className={`btn ${button.id}`}\n          type=\"button\"\n          key={button.id}\n          name={button.id}\n          value={button.value}\n          onClick={e => handleClick(button.type, e.target.value)}\n        >\n          {button.value}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport ButtonContainer from \"./components/ButtonContainer\";\n\nimport \"./styles/index.scss\";\n\nfunction App() {\n  const [displayText, setDisplayText] = useState(\"0\");\n\n  const updateDisplay = (arr, value) => {\n    value =\n      Number(value) && Number(value) < 0 && arr.length > 0\n        ? `(${value})`\n        : value;\n    const result =\n      arr\n        .map(item =>\n          typeof item === \"number\" && item < 0 ? `(${item})` : item\n        )\n        .join(\"\") + value;\n\n    setDisplayText(result);\n  };\n\n  return (\n    <div id=\"wrapper\" className=\"wrapper\">\n      <div id=\"calculator\" className=\"calculator\">\n        <h4 id=\"header\" className=\"header\">\n          Calculator\n        </h4>\n        <div id=\"display-container\" className=\"display-container\">\n          <bdi id=\"display\" className=\"display\">\n            {displayText}\n          </bdi>\n        </div>\n        <ButtonContainer updateDisplay={updateDisplay} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}